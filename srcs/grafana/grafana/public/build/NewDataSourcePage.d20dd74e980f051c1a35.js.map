{"version":3,"sources":["webpack:///./public/app/features/datasources/NewDataSourcePage.tsx","webpack:///./public/app/core/components/Card/Card.tsx","webpack:///./public/app/features/plugins/PluginsErrorsInfo.tsx","webpack:///./public/app/features/plugins/state/selectors.ts"],"names":["NewDataSourcePage","onDataSourceTypeClicked","plugin","props","addDataSource","onSearchQueryChange","value","setDataSourceTypeSearchQuery","onLearnMoreClick","evt","stopPropagation","this","loadDataSourcePlugins","plugins","length","items","getItemKey","item","id","toString","renderItem","DataSourceTypeCard","onClick","categories","map","category","className","key","title","renderPlugins","variant","href","target","rel","navModel","isLoading","searchQuery","Contents","onChange","placeholder","renderCategories","PureComponent","isPhantom","module","learnMoreLink","info","links","name","description","ariaLabel","selectors","pages","AddDataSource","dataSourcePlugins","logoUrl","logos","small","actions","url","icon","labels","status","signature","aria-label","getNavModel","main","text","subTitle","node","mapDispatchToProps","hot","connect","state","getDataSourcePlugins","dataSources","dataSourceTypeSearchQuery","isLoadingDataSources","Card","mainClassName","cx","src","loadPluginsErrors","PluginsErrorsInfo","errors","getAllPluginsErrors","children","theme","useTheme","useAsync","loadPlugins","loading","PluginsList","signatureErrorNotice","severity","urlTitle","css","e","spacing","sm","justify","align","pluginId","mapPluginErrorCodeToSignatureStatus","errorCode","getPlugins","regex","RegExp","filter","test","author","getPluginsSearchQuery"],"mappings":"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","file":"NewDataSourcePage.d20dd74e980f051c1a35.js","sourcesContent":["import React, { FC, PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\nimport { DataSourcePluginMeta, NavModel } from '@grafana/data';\nimport { Button, LinkButton, List } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport Page from 'app/core/components/Page/Page';\nimport { DataSourcePluginCategory, StoreState } from 'app/types';\nimport { addDataSource, loadDataSourcePlugins } from './state/actions';\nimport { getDataSourcePlugins } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { setDataSourceTypeSearchQuery } from './state/reducers';\nimport { PluginSignatureBadge } from '../plugins/PluginSignatureBadge';\nimport { Card } from 'app/core/components/Card/Card';\nimport { PluginsErrorsInfo } from '../plugins/PluginsErrorsInfo';\n\nexport interface Props {\n  navModel: NavModel;\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n  isLoading: boolean;\n  addDataSource: typeof addDataSource;\n  loadDataSourcePlugins: typeof loadDataSourcePlugins;\n  searchQuery: string;\n  setDataSourceTypeSearchQuery: typeof setDataSourceTypeSearchQuery;\n}\n\nclass NewDataSourcePage extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadDataSourcePlugins();\n  }\n\n  onDataSourceTypeClicked = (plugin: DataSourcePluginMeta) => {\n    this.props.addDataSource(plugin);\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setDataSourceTypeSearchQuery(value);\n  };\n\n  renderPlugins(plugins: DataSourcePluginMeta[]) {\n    if (!plugins || !plugins.length) {\n      return null;\n    }\n\n    return (\n      <List\n        items={plugins}\n        getItemKey={item => item.id.toString()}\n        renderItem={item => (\n          <DataSourceTypeCard\n            plugin={item}\n            onClick={() => this.onDataSourceTypeClicked(item)}\n            onLearnMoreClick={this.onLearnMoreClick}\n          />\n        )}\n      />\n    );\n  }\n\n  onLearnMoreClick = (evt: React.SyntheticEvent<HTMLElement>) => {\n    evt.stopPropagation();\n  };\n\n  renderCategories() {\n    const { categories } = this.props;\n\n    return (\n      <>\n        {categories.map(category => (\n          <div className=\"add-data-source-category\" key={category.id}>\n            <div className=\"add-data-source-category__header\">{category.title}</div>\n            {this.renderPlugins(category.plugins)}\n          </div>\n        ))}\n        <div className=\"add-data-source-more\">\n          <LinkButton\n            variant=\"secondary\"\n            href=\"https://grafana.com/plugins?type=datasource&utm_source=grafana_add_ds\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Find more data source plugins on grafana.com\n          </LinkButton>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { navModel, isLoading, searchQuery, plugins } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <FilterInput value={searchQuery} onChange={this.onSearchQueryChange} placeholder=\"Filter by name or type\" />\n            <div className=\"page-action-bar__spacer\" />\n            <LinkButton href=\"datasources\">Cancel</LinkButton>\n          </div>\n          {!searchQuery && (\n            <PluginsErrorsInfo>\n              <>\n                <br />\n                <p>\n                  Note that <strong>unsigned front-end datasource plugins</strong> are still usable, but this is subject\n                  to change in the upcoming releases of Grafana\n                </p>\n              </>\n            </PluginsErrorsInfo>\n          )}\n          <div>\n            {searchQuery && this.renderPlugins(plugins)}\n            {!searchQuery && this.renderCategories()}\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\ninterface DataSourceTypeCardProps {\n  plugin: DataSourcePluginMeta;\n  onClick: () => void;\n  onLearnMoreClick: (evt: React.SyntheticEvent<HTMLElement>) => void;\n}\n\nconst DataSourceTypeCard: FC<DataSourceTypeCardProps> = props => {\n  const { plugin, onLearnMoreClick } = props;\n  const isPhantom = plugin.module === 'phantom';\n  const onClick = !isPhantom ? props.onClick : () => {};\n\n  // find first plugin info link\n  const learnMoreLink = plugin.info.links && plugin.info.links.length > 0 ? plugin.info.links[0] : null;\n\n  return (\n    <Card\n      title={plugin.name}\n      description={plugin.info.description}\n      ariaLabel={selectors.pages.AddDataSource.dataSourcePlugins(plugin.name)}\n      logoUrl={plugin.info.logos.small}\n      actions={\n        <>\n          {learnMoreLink && (\n            <LinkButton\n              variant=\"secondary\"\n              href={`${learnMoreLink.url}?utm_source=grafana_add_ds`}\n              target=\"_blank\"\n              rel=\"noopener\"\n              onClick={onLearnMoreClick}\n              icon=\"external-link-alt\"\n            >\n              {learnMoreLink.name}\n            </LinkButton>\n          )}\n          {!isPhantom && <Button>Select</Button>}\n        </>\n      }\n      labels={\n        !isPhantom && (\n          <div>\n            <PluginSignatureBadge status={plugin.signature} />\n          </div>\n        )\n      }\n      className={isPhantom ? 'add-data-source-item--phantom' : ''}\n      onClick={onClick}\n      aria-label={selectors.pages.AddDataSource.dataSourcePlugins(plugin.name)}\n    />\n  );\n};\n\nexport function getNavModel(): NavModel {\n  const main = {\n    icon: 'database',\n    id: 'datasource-new',\n    text: 'Add data source',\n    href: 'datasources/new',\n    subTitle: 'Choose a data source type',\n  };\n\n  return {\n    main: main,\n    node: main,\n  };\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(),\n    plugins: getDataSourcePlugins(state.dataSources),\n    searchQuery: state.dataSources.dataSourceTypeSearchQuery,\n    categories: state.dataSources.categories,\n    isLoading: state.dataSources.isLoadingDataSources,\n  };\n}\n\nconst mapDispatchToProps = {\n  addDataSource,\n  loadDataSourcePlugins,\n  setDataSourceTypeSearchQuery,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(NewDataSourcePage));\n","import React from 'react';\nimport { cx } from 'emotion';\n\nexport interface CardProps {\n  logoUrl?: string;\n  title: string;\n  description?: string;\n  labels?: React.ReactNode;\n  actions?: React.ReactNode;\n  onClick?: () => void;\n  ariaLabel?: string;\n  className?: string;\n}\n\nexport const Card: React.FC<CardProps> = ({\n  logoUrl,\n  title,\n  description,\n  labels,\n  actions,\n  onClick,\n  ariaLabel,\n  className,\n}) => {\n  const mainClassName = cx('add-data-source-item', className);\n\n  return (\n    <div className={mainClassName} onClick={onClick} aria-label={ariaLabel}>\n      {logoUrl && <img className=\"add-data-source-item-logo\" src={logoUrl} />}\n      <div className=\"add-data-source-item-text-wrapper\">\n        <span className=\"add-data-source-item-text\">{title}</span>\n        {description && <span className=\"add-data-source-item-desc\">{description}</span>}\n        {labels && <div>{labels}</div>}\n      </div>\n      {actions && <div className=\"add-data-source-item-actions\">{actions}</div>}\n    </div>\n  );\n};\n","import React from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { HorizontalGroup, InfoBox, List, useTheme } from '@grafana/ui';\nimport { mapPluginErrorCodeToSignatureStatus, PluginSignatureBadge } from './PluginSignatureBadge';\nimport { StoreState } from '../../types';\nimport { getAllPluginsErrors } from './state/selectors';\nimport { loadPlugins, loadPluginsErrors } from './state/actions';\nimport useAsync from 'react-use/lib/useAsync';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { hot } from 'react-hot-loader';\nimport { PluginError } from '@grafana/data';\nimport { css } from 'emotion';\n\ninterface ConnectedProps {\n  errors: PluginError[];\n}\n\ninterface DispatchProps {\n  loadPluginsErrors: typeof loadPluginsErrors;\n}\n\ninterface OwnProps {\n  children?: React.ReactNode;\n}\n\ntype PluginsErrorsInfoProps = ConnectedProps & DispatchProps & OwnProps;\n\nexport const PluginsErrorsInfoUnconnected: React.FC<PluginsErrorsInfoProps> = ({\n  loadPluginsErrors,\n  errors,\n  children,\n}) => {\n  const theme = useTheme();\n\n  const { loading } = useAsync(async () => {\n    await loadPluginsErrors();\n  }, [loadPlugins]);\n\n  if (loading || errors.length === 0) {\n    return null;\n  }\n  return (\n    <InfoBox\n      aria-label={selectors.pages.PluginsList.signatureErrorNotice}\n      severity=\"warning\"\n      urlTitle=\"Read more about plugin signing\"\n      url=\"https://grafana.com/docs/grafana/latest/plugins/plugin-signature-verification/\"\n    >\n      <div>\n        <p>\n          We have encountered{' '}\n          <a href=\"https://grafana.com/docs/grafana/latest/developers/plugins/backend/\" target=\"_blank\">\n            data source backend plugins\n          </a>{' '}\n          that are unsigned. Grafana Labs cannot guarantee the integrity of unsigned plugins and recommends using signed\n          plugins only.\n        </p>\n        The following plugins are disabled and not shown in the list below:\n        <List\n          items={errors}\n          className={css`\n            list-style-type: circle;\n          `}\n          renderItem={e => (\n            <div\n              className={css`\n                margin-top: ${theme.spacing.sm};\n              `}\n            >\n              <HorizontalGroup spacing=\"sm\" justify=\"flex-start\" align=\"center\">\n                <strong>{e.pluginId}</strong>\n                <PluginSignatureBadge\n                  status={mapPluginErrorCodeToSignatureStatus(e.errorCode)}\n                  className={css`\n                    margin-top: 0;\n                  `}\n                />\n              </HorizontalGroup>\n            </div>\n          )}\n        />\n        {children}\n      </div>\n    </InfoBox>\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state: StoreState) => {\n  return {\n    errors: getAllPluginsErrors(state.plugins),\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = {\n  loadPluginsErrors,\n};\n\nexport const PluginsErrorsInfo = hot(module)(\n  connect(mapStateToProps, mapDispatchToProps)(PluginsErrorsInfoUnconnected)\n);\n","import { PluginsState } from 'app/types/plugins';\n\nexport const getPlugins = (state: PluginsState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.plugins.filter(item => {\n    return regex.test(item.name) || regex.test(item.info.author.name) || regex.test(item.info.description);\n  });\n};\nexport const getAllPluginsErrors = (state: PluginsState) => {\n  return state.errors;\n};\n\nexport const getPluginsSearchQuery = (state: PluginsState) => state.searchQuery;\n"],"sourceRoot":""}